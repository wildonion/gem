
       https://docs.metaplex.com/programs/understanding-programs
       https://www.anchor-lang.com/docs/cross-program-invocations
       https://github.com/coral-xyz/anchor/tree/master/tests/cpi-returns
       https://www.anchor-lang.com/docs/space
       https://docs.metaplex.com/programs/understanding-programs#discriminators
       https://solana.stackexchange.com/questions/26/what-is-a-program-derived-address-pda-exactly/1480#1480
       https://solana.stackexchange.com/a/1480
       https://docs.rs/anchor-lang/latest/anchor_lang/derive.Accounts.html
       https://docs.metaplex.com/programs/understanding-programs#signer-andor-writable-accounts

    ======================================
    ============= ABOUT SOLANA WALLET INFO 
    ======================================
    
    solana uses ed25519 digital signature public key encryption 
    for generating wallet info the public and the private key 
    since we can sign a tx call using private key to generate
    the tx signature thus the account that wants to call the 
    tx must be the private key holder to do this and public key  
    will be used for transferring lamprorts and ownership checking
    because of these the public key of the program id must equals 
    to the account that wants to verify the tx call and mutate 
    the instruction data inside the tx on chain.
    
    `solana-keygen new` will generate a new wallet info which contains 
    public and private keys produced from the elliptic curve algorithm
    based on Ed25519 which is a public key digital signature which means
    that a message came from the holder of a certain private key and that 
    the information has not been tampered with in flight; the hash of the 
    pulic key will be used as the wallet address or it can be used as it is
    in its raw format and the private key to sign transaction method calls 
    to make sure that the public key of the transaction call or the signer 
    info is the one who signed the call with his or her private key, also 
    the private key is a pen that can be used to sign every program transaction 
    call which the generated signature from signing the transaction is a 64 bytes 
    utf8 bytes which means that the tx has signed by the caller 
    using his/her private key.
  

    =============================================
    ============= ABOUT NULL POINTER OPTIMISATION
    =============================================

    borsh uses a null-pointer optimization in serializing Option means it takes 
    extra 1 byte instead of allocating extra 8 bytes tag which is used to 
    point to the current variant; by this it serializes an Option as 1 byte for the 
    variant identifier and then additional x bytes for the content if it's Some
    otherwise there will be just 1 byte to avoid null pointer or zero bytes,
    a null-pointer optimization means a reference can never be null since 
    Option<&T> is the exact size of the T because in enum the size of the 
    whole enum is equals to the size of the biggest variant, in Option enum 
    and all enums with two variants instead of requiring an extra word or 8 bytes 
    tag which can points to the current variant of the enum we can use the size of T
    with 1 extra byte to represent the tag to make sure that there is 
    no invalid pointer or reference.

    to avoid zero bytes borsh will add 1 extra byte 
    to Option that whenever the None part was selected 
    that extra 1 byte represent the size of the Option.

    =========================================
    =============  SOLANA RUNTIME EXPLANATION
    =========================================

    solana runtime has its own BPF loader which supports no std libs
    since contracts can't interact with the ouside world due to the fact
    that they are on VM not a real hardware to compile std libs thus there 
    is no socket to do this due to the securtiy reasons although
    the reason that solana contract gets compiled to .so is because 
    they can be loaded from the linux kernel which is blazingly 
    fast also from the browsers, a json RPC call must be invoked 
    with a contract method name and id (public key) to the RPC server 
    on the solana runtime node to load the .so contract which has bee 
    deployed and contains the BPF bytecode in it to call 
    the method name inside the incoming RPC request 
    to change the state of the blockchain.

    the reason that solana RPC data serialization is based on JSON
    is because dApps are browser based applications which don't 
    support raw TCP or UDP protocols and other serialization format 
    like capnp thus it's easier to use JSON and RPC or websocket on 
    top of http which is a layer of top of TCP protocol.

    we can run tx in parallel means that only a single thread 
    can mutate it like an account that want to mutate a instruction data 
    on the chain which must be the owner of the program or decreasing
    lamports from it but multiple thread can read that.

    since solana can execute accounts instruction concurrenlty and everything 
    will be built and stored in runtime inside accounts there might be happend 
    a data collision issue in which two different data types share the same underlying 
    memeory allocation to avoid this we can use a discriminator or a unique storage key 
    in such a way that NEAR uses a shared enum in a way that it serializes each varinat 
    using borsh to add extra bytes by prefixing every type in runtime with the serialized 
    variant related to each type but anchor uses 8 bytes discriminator to avoid data 
    collision by adding extra unique bytes which will be calculated by hashing (SHA256) 
    every account name to the first byets of the serialized account type in order to 
    specify which account is being executed on runtime in parallel right now or which 
    one is being deserialized inside the fontend. 

    in rust the vairant with the largest size is the whole size of the enum also 
    there will be usize bytes tag which will be pointed to the current vairant in 
    borsh, enum serialization uses extra 1 bytes instead of 8 bytes tag to avoid 
    zero bytes and null pointer optimisation conditions for example in Option enum 
    the size will be 1 byte + T bytes if there was T otherwise 1 byte which is a 
    pointer that shows the Option has no available data right now. 

    in runtime we can avoid data collision using borsh encoded enum offset variant 
    to build a unique storgage key like by adding a unique 8 bytes discriminator built
    from the account name to the prefix of every account to have a unique account
    on chain on runtime to avoid deadlock, race conditions and data collision, also 
    we can use the unique storage key in hashmap like structure in which we can make sure 
    that the key inside the map is unique in memroy in entire runtime the example of this 
    strategey is creating the PDAs from a seed and a bump.
    
    since data in solana will be stored in accounts hence we can decode the data using 
    borsh to mutate them on chain but there is no hashmap like structure thus we can 
    make a new one using PDA since PDA is only public key without a private key in which 
    it can be built from a seed and a bump also we have to consider the total space that 
    must be used by every account to allocate storage on chain using space 
    constraint on the PDA account.

    idl means that with we can use the json of the compiled program metadata 
    and its methods to create rpc calls to the runtime that contains the deployed 
    program instead of loading the compiled program or .so inside the client, 
    since .so can't be loaded inside the browsers despite the .wasm which its 
    methods can be called inside the browser directly, also if we update a 
    contract method body there is no need to update the idl since idl contains 
    the solana account structures that will track them in creating new one or 
    updating an existing one.   


    =========================================
    ============= SOLANA ACCOUNTS EXPLANATION
    ========================================= 
    https://docs.solana.com/developing/programming-model/accounts#ownership-and-assignment-to-programs

    each public key must be of type Account or AccountInfo in order the solana all accounts be known 
    before the runtime for the solana since it must knows which account is being executed right now in 
    runtime and which account is mutating the data on chain to avoid race condition on chain.

    account must be initialized means program will do a cpi to the runtime to set 
    the owner of the PDA to the program id to be able to mutate its data on chain 
    then in second call we can mutate its data on chain since only the program can 
    mutate data on chain and now the owner of the PDA is the program id.
    
    we must use &[u8] since it's cheaper than Vec which is on the heap, 
    but it's not sized at compile time thus it must be behind a pointer 
    and pointers needs valid lifetimes.
    
    data in solana will be stored in accounts not the contract thus discriminator 
    will be used like the storage key and will be added to the first byte of the 
    instruction data or the account to understand which instruction is being executed 
    or to differentiate between different types of accounts within program.
    
    on first deployment of the contract the owner of the program is the BPF loader
    itself also a new key pair will be generated and used to deploy the contract 
    on it which is the address that the BPF bytecode is located, in order to 
    amend any instruction data on the contract the account that wants to amend 
    must be the owner of the program id or the public key of the program account 
    means account.owner == program_id which this will be checked by Account type 
    in anchor that will check the owner of instruction data or the serialized 
    data passed in to the function equals to the program id public key to modify 
    the data on chain in other words the mutation method must be called only by 
    contract method itself not a third party account.

    accounts on solana can be used to store data inside of them in which the data 
    inside a specific account can only be modified by the account owner means the 
    owner must be the program id and the runtime grants the program write access 
    to the account if its id matches the owner.
    
    since instruction data are on solana accounts thus every account must be 
    initialized inside the program to be owned by the program id first at runtime 
    using the CPI calls by the help of the init constraint then it can mutate 
    the state of the contract on chain using the serialized data inside of it 
    (since data will be stored inside accounts) which also must be the owner of the 
    serialized generic data, the init constraint by default sets the owner field 
    of the created account to the currently executing program means that it sets
    the account.owner to the program id so it can mutate the instruction data on chain, 
    aslo we can add the owner constraint to specify a different program owner.

    authority is the program's upgrade authority, the one who can sign transactions 
    on behalf of the account and who has deployed the program and has access to change 
    the program content thus is the owner of the program and with new authority account
    the program id will be changed with new deployment also SBF loader will use the 
    program's account's owner to load the program which is the authority 
    who deployed the program.

    singer is the private key holder and the one who can signs the transaction 
    with his or her private key, PDA is an off curve address with no private 
    key that can be used as a staking pool account for transferring and 
    withdrawing lamports since it has no private key thus no one can sign 
    a transaction call to that address to mutate the state of the account; 
    the PDA can be generated from a seed which can be a unique indentifer 
    like public key plus a bump which is a one byte number.

    PDA will never conflict with cryptographically generated public keys All 
    cryptographic public keys like public key digital signature which is based 
    on Ed25519 are part of what we call an elliptic curve, if, when generating 
    a PDA, the algorithm generated a key that falls on that curve, a bump which 
    is 1 byte is added to the address and is incremented by one until the generated 
    address no longer falls on the curve.

    PDA can be used to generate signature to be used for calling between programs
    since they have no private keys thus no third party can sign the transaction
    only the PDA owner can do this (without private key) which can be used for 
    signing a transaction method call of another contract and also used for 
    depositing/withdrawing lamports as a escrow contract.


    program id    : is the public key of the deployed program which the keypair is inside the target/deploy
    authority     : is the upgrade authority or the owner of the deployed contract
    owner         : is the one who can mutate instruction data on the chain; owner == program_id means only the program account can mutate data on the chain, the owner account will be initialized using a CPI call to the runtime using init constraint to set its owner to the current program id
    holder        : is the one who has the generated private key from the Ed25519 elliptic curve 
    signer        : is the private key holder and can sign tx calls
    signer mutable: is the private key holder which can sign tx calls and must be writable or mutable to make changes on it like transferring lamports from it
    PDA           : is an off curve public key that can be used as the escrow account and sign CPI calls


    in ticket program the game_state field is an account over generic GameState
    in which its owner must equals to the id inside the declare_id which is 
    the id of the program also the #[accounts] proc macro attribute sets the 
    owner of the GameState data to the declare_id in order to be able to mutate
    data on the chain since only the account that owns the program can amend data
    over some generic thus game_state is a field in all structures that has write 
    access to mutate and change GameState data in this program; the game_state
    field is also a PDA accounts since a transaction method call on the owner account 
    the game_state account might be came from a server (not the frontend itself 
    where we have access the program account) which wants to amend data on the chain.

    instructions are data: Rc<RefCell<&'d mut [u8]>> (Rc makes strong counter 
    of the type in which we can count its reference when we pass it to other 
    scopes or borrow it and if it reaches zero the type can be dropped 
    otherwise can't move or dropped when other types are using it.) on chain 
    which must be mutated by the program owner in which the program will create an 
    init account by cpi to the solana on first init call to make the account 
    owner of the instruction data to be able to mutate its instruction data on chain. 

    by putting instruction data in each account solana can know how to run transaction
    in a better parallel manner by knowing which accounts and data is required before runtime,
    means that each tx can be run in a separate thread and must be Arc<Mutex<Transaction>> + Send + Sync + 'static 
    to avoid deadlocks, race conditions and TOD attacks when want to share it between tokio spawn 
    threads using tokio channels but solana fix this by knowing which account holds what instruction 
    data at runtime to allow the tx be executed in parallel. 

    `#[derive(Accounts)]` must be on top of the structure that contains accounts, 
    `#[account()]` must be on top of the account fields that own a generic on chain 
    and `#[account]` must be on top of the generic structure that is owned by an account 
    which contains its utf8 bytes data of the serialized generic structure.
